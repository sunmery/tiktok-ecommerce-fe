server {
    listen 80;
    server_name ${DOAMIAN};
    return 301 https://$host$request_uri;
}

server {
    server_name ${DOAMIAN} www.${DOAMIAN};  # 服务器名称

    # UDP listener for QUIC+HTTP/3
    # http/3
    listen 443 quic reuseport;

    # http/2 and http/1.1
    listen 443 ssl;
    http2 on;

    # 以下为各种 HTTP 安全相关头部的设置
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff;
    add_header Alt-Svc 'h3=":443"; ma=86400, h3-29=":443"; ma=86400';
    add_header Content-Security-Policy "
        default-src 'none';                                # 默认拒绝所有内容加载
        script-src 'self';                                 # 允许加载同源脚本 (你的 JS 包)
        style-src 'self' 'unsafe-inline';                  # 允许加载同源 CSS 和内联样式 (见下方说明)
        connect-src 'self' https://your-go-api.example.com; # 允许连接到同源 (如果需要) 和你的 服务器 API 源
        img-src 'self' data: https:;                       # 允许加载同源图片、data URI 和所有 HTTPS 源图片 (可进一步限制)
        font-src 'self' https://fonts.gstatic.com;         # 允许加载同源字体和 Google Fonts (示例)
        frame-src 'none';                                  # 不允许在 frame 或 iframe 中加载
        frame-ancestors 'none';                            # 防止点击劫持 (不允许其他网站嵌入你的网站)
        form-action 'self' https://your-go-api.example.com; # 允许表单提交到同源或你的 服务器 API
        base-uri 'self';                                   # 限制 <base> 标签的使用
        object-src 'none';                                 # 禁止加载 Flash 等插件 (<object>, <embed>)
        report-uri /csp-violation-report-endpoint;         # 发送违规报告的端点
    " always;

    # SSL/TLS 相关配置
    ssl_protocols TLSv1.3 TLSv1.2;  # 设置支持的 SSL 协议版本
    # ssl_ciphers ...;  # 设置 SSL 密码套件
    ssl_prefer_server_ciphers on;  # 优先使用服务器的密码套件
    ssl_ecdh_curve X25519:P-256:P-384;  # 设置 ECDH 曲线
    ssl_early_data on;  # 启用 TLS 1.3 的 0-RTT 特性
    ssl_stapling on;  # 启用 OCSP Stapling
    ssl_stapling_verify on;  # 启用 OCSP Stapling 的验证

    # SSL 证书路径配置
    ssl_certificate     /etc/nginx/ssl/nginx.crt;  # SSL 证书路径
    ssl_certificate_key /etc/nginx/ssl/nginx.key;  # SSL 证书密钥路径

    location / {
        root   /etc/nginx/html;
        index  index.html index.htm;
        try_files $uri $uri/ /index.html;
    }
}
