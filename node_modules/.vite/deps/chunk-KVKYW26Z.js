import {
  getListItemUtilityClass,
  listItemClasses_default
} from "./chunk-PXGEP5G3.js";
import {
  ComponentListContext_default
} from "./chunk-A2OOSM2Y.js";
import {
  RowListContext_default
} from "./chunk-VMGNGN5Z.js";
import {
  useSlot
} from "./chunk-5HX3JXQL.js";
import {
  styled_default,
  useThemeProps
} from "./chunk-W73MHC6L.js";
import {
  _objectWithoutPropertiesLoose,
  capitalize,
  composeClasses,
  isMuiElement
} from "./chunk-B2XREVTE.js";
import {
  _extends,
  require_prop_types
} from "./chunk-TQPOXQWZ.js";
import {
  clsx_default
} from "./chunk-O6BLJYII.js";
import {
  require_jsx_runtime
} from "./chunk-Z7UZWT6Y.js";
import {
  require_react
} from "./chunk-5K37UKBQ.js";
import {
  __toESM
} from "./chunk-H7J5LBHK.js";

// node_modules/.pnpm/@mui+joy@5.0.0-beta.48_@emotion+react@11.13.3_@types+react@18.3.10_react@18.3.1__@emotion+sty_64eoep2qbre62quybdrvvi4wau/node_modules/@mui/joy/ListItem/ListItem.js
var React5 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/.pnpm/@mui+joy@5.0.0-beta.48_@emotion+react@11.13.3_@types+react@18.3.10_react@18.3.1__@emotion+sty_64eoep2qbre62quybdrvvi4wau/node_modules/@mui/joy/List/NestedListContext.js
var React = __toESM(require_react());
var NestedListContext = React.createContext(false);
if (true) {
  NestedListContext.displayName = "NestedListContext";
}
var NestedListContext_default = NestedListContext;

// node_modules/.pnpm/@mui+joy@5.0.0-beta.48_@emotion+react@11.13.3_@types+react@18.3.10_react@18.3.1__@emotion+sty_64eoep2qbre62quybdrvvi4wau/node_modules/@mui/joy/List/WrapListContext.js
var React2 = __toESM(require_react());
var WrapListContext = React2.createContext(false);
if (true) {
  WrapListContext.displayName = "WrapListContext";
}
var WrapListContext_default = WrapListContext;

// node_modules/.pnpm/@mui+joy@5.0.0-beta.48_@emotion+react@11.13.3_@types+react@18.3.10_react@18.3.1__@emotion+sty_64eoep2qbre62quybdrvvi4wau/node_modules/@mui/joy/ListSubheader/ListSubheaderContext.js
var React3 = __toESM(require_react());
var ListSubheaderContext = React3.createContext(void 0);
if (true) {
  ListSubheaderContext.displayName = "ListSubheaderContext";
}
var ListSubheaderContext_default = ListSubheaderContext;

// node_modules/.pnpm/@mui+joy@5.0.0-beta.48_@emotion+react@11.13.3_@types+react@18.3.10_react@18.3.1__@emotion+sty_64eoep2qbre62quybdrvvi4wau/node_modules/@mui/joy/List/GroupListContext.js
var React4 = __toESM(require_react());
var GroupListContext = React4.createContext(void 0);
if (true) {
  GroupListContext.displayName = "GroupListContext";
}
var GroupListContext_default = GroupListContext;

// node_modules/.pnpm/@mui+joy@5.0.0-beta.48_@emotion+react@11.13.3_@types+react@18.3.10_react@18.3.1__@emotion+sty_64eoep2qbre62quybdrvvi4wau/node_modules/@mui/joy/ListItem/ListItem.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var _excluded = ["component", "className", "children", "nested", "sticky", "variant", "color", "startAction", "endAction", "role", "slots", "slotProps"];
var useUtilityClasses = (ownerState) => {
  const {
    sticky,
    nested,
    nesting,
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root", nested && "nested", nesting && "nesting", sticky && "sticky", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`],
    startAction: ["startAction"],
    endAction: ["endAction"]
  };
  return composeClasses(slots, getListItemUtilityClass, {});
};
var StyledListItem = styled_default("li")(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  return [
    !ownerState.nested && {
      // add negative margin to ListItemButton equal to this ListItem padding
      "--ListItemButton-marginInline": `calc(-1 * var(--ListItem-paddingLeft)) calc(-1 * var(--ListItem-paddingRight))`,
      "--ListItemButton-marginBlock": "calc(-1 * var(--ListItem-paddingY))",
      alignItems: "center",
      gap: "var(--ListItem-gap)",
      marginInline: "var(--ListItem-marginInline)"
    },
    ownerState.nested && {
      // add negative margin to NestedList equal to this ListItem padding
      "--NestedList-marginRight": "calc(-1 * var(--ListItem-paddingRight))",
      "--NestedList-marginLeft": "calc(-1 * var(--ListItem-paddingLeft))",
      "--NestedListItem-paddingLeft": `calc(var(--ListItem-paddingLeft) + var(--List-nestedInsetStart))`,
      // add negative margin to ListItem, ListItemButton to make them start from the edge.
      "--ListItemButton-marginBlock": "0px",
      "--ListItemButton-marginInline": "calc(-1 * var(--ListItem-paddingLeft)) calc(-1 * var(--ListItem-paddingRight))",
      "--ListItem-marginInline": "calc(-1 * var(--ListItem-paddingLeft)) calc(-1 * var(--ListItem-paddingRight))",
      flexDirection: "column"
    },
    // Base styles
    _extends({
      // Integration with control elements, for example Checkbox, Radio.
      "--unstable_actionRadius": "calc(var(--ListItem-radius) - var(--variant-borderWidth, 0px))"
    }, ownerState.startAction && {
      "--unstable_startActionWidth": "2rem"
      // to add sufficient padding-left on ListItemButton
    }, ownerState.endAction && {
      "--unstable_endActionWidth": "2.5rem"
      // to add sufficient padding-right on ListItemButton
    }, {
      boxSizing: "border-box",
      borderRadius: "var(--ListItem-radius)",
      display: "var(--_ListItem-display)",
      "&:not([hidden])": {
        "--_ListItem-display": "var(--_List-markerDisplay, flex)"
      },
      flex: "none",
      // prevent children from shrinking when the List's height is limited.
      listStyleType: "var(--_List-markerType, disc)",
      position: "relative",
      paddingBlockStart: ownerState.nested ? 0 : "var(--ListItem-paddingY)",
      paddingBlockEnd: ownerState.nested ? 0 : "var(--ListItem-paddingY)",
      paddingInlineStart: "var(--ListItem-paddingLeft)",
      paddingInlineEnd: "var(--ListItem-paddingRight)"
    }, ownerState["data-first-child"] === void 0 && _extends({}, ownerState.row ? {
      marginInlineStart: "var(--List-gap)"
    } : {
      marginBlockStart: "var(--List-gap)"
    }), ownerState.row && ownerState.wrap && {
      marginInlineStart: "var(--List-gap)",
      marginBlockStart: "var(--List-gap)"
    }, {
      minBlockSize: "var(--ListItem-minHeight)"
    }, ownerState.sticky && {
      // sticky in list item can be found in grouped options
      position: "sticky",
      top: "var(--ListItem-stickyTop, 0px)",
      // integration with Menu and Select.
      zIndex: 1,
      background: `var(--ListItem-stickyBackground, ${theme.vars.palette.background.body})`
    }, {
      [`.${listItemClasses_default.nested} > &`]: {
        "--_ListItem-display": "flex"
      }
    }),
    (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]
  ];
});
var ListItemRoot = styled_default(StyledListItem, {
  name: "JoyListItem",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var ListItemStartAction = styled_default("div", {
  name: "JoyListItem",
  slot: "StartAction",
  overridesResolver: (props, styles) => styles.startAction
})(({
  ownerState
}) => ({
  display: "inherit",
  position: "absolute",
  top: ownerState.nested ? "calc(var(--ListItem-minHeight) / 2)" : "50%",
  left: 0,
  transform: "translate(var(--ListItem-startActionTranslateX), -50%)",
  zIndex: 1
  // to stay on top of ListItemButton (default `position: relative`).
}));
var ListItemEndAction = styled_default("div", {
  name: "JoyListItem",
  slot: "StartAction",
  overridesResolver: (props, styles) => styles.startAction
})(({
  ownerState
}) => ({
  display: "inherit",
  position: "absolute",
  top: ownerState.nested ? "calc(var(--ListItem-minHeight) / 2)" : "50%",
  right: 0,
  transform: "translate(var(--ListItem-endActionTranslateX), -50%)"
}));
var ListItem = React5.forwardRef(function ListItem2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyListItem"
  });
  const group = React5.useContext(GroupListContext_default);
  const listComponent = React5.useContext(ComponentListContext_default);
  const row = React5.useContext(RowListContext_default);
  const wrap = React5.useContext(WrapListContext_default);
  const nesting = React5.useContext(NestedListContext_default);
  const {
    component: componentProp,
    className,
    children,
    nested = false,
    sticky = false,
    variant = "plain",
    color = "neutral",
    startAction,
    endAction,
    role: roleProp,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const [subheaderId, setSubheaderId] = React5.useState("");
  const [listElement, listRole] = (listComponent == null ? void 0 : listComponent.split(":")) || ["", ""];
  const component = componentProp || (listElement && !listElement.match(/^(ul|ol|menu)$/) ? "div" : void 0);
  let role = group === "menu" ? "none" : void 0;
  if (listComponent) {
    role = {
      menu: "none",
      menubar: "none",
      group: "presentation"
    }[listRole];
  }
  if (roleProp) {
    role = roleProp;
  }
  const ownerState = _extends({}, props, {
    sticky,
    startAction,
    endAction,
    row,
    wrap,
    variant,
    color,
    nesting,
    nested,
    component,
    role
  });
  const classes = useUtilityClasses(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    additionalProps: {
      role
    },
    ref,
    className: clsx_default(classes.root, className),
    elementType: ListItemRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotStartAction, startActionProps] = useSlot("startAction", {
    className: classes.startAction,
    elementType: ListItemStartAction,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndAction, endActionProps] = useSlot("endAction", {
    className: classes.endAction,
    elementType: ListItemEndAction,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime.jsx)(ListSubheaderContext_default.Provider, {
    value: setSubheaderId,
    children: (0, import_jsx_runtime.jsx)(NestedListContext_default.Provider, {
      value: nested ? subheaderId || true : false,
      children: (0, import_jsx_runtime2.jsxs)(SlotRoot, _extends({}, rootProps, {
        children: [startAction && (0, import_jsx_runtime.jsx)(SlotStartAction, _extends({}, startActionProps, {
          children: startAction
        })), React5.Children.map(children, (child, index) => React5.isValidElement(child) ? React5.cloneElement(child, _extends({}, index === 0 && {
          "data-first-child": ""
        }, isMuiElement(child, ["ListItem"]) && {
          // The ListItem of ListItem should not be 'li'
          component: child.props.component || "div"
        })) : child), endAction && (0, import_jsx_runtime.jsx)(SlotEndAction, _extends({}, endActionProps, {
          children: endAction
        }))]
      }))
    })
  });
});
true ? ListItem.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types.default.node,
  /**
   * @ignore
   */
  className: import_prop_types.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * The element to display at the end of ListItem.
   */
  endAction: import_prop_types.default.node,
  /**
   * If `true`, the component can contain NestedList.
   * @default false
   */
  nested: import_prop_types.default.bool,
  /**
   * @ignore
   */
  role: import_prop_types.default.string,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types.default.shape({
    endAction: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]),
    root: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]),
    startAction: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types.default.shape({
    endAction: import_prop_types.default.elementType,
    root: import_prop_types.default.elementType,
    startAction: import_prop_types.default.elementType
  }),
  /**
   * The element to display at the start of ListItem.
   */
  startAction: import_prop_types.default.node,
  /**
   * If `true`, the component has sticky position (with top = 0).
   * @default false
   */
  sticky: import_prop_types.default.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types.default.string])
} : void 0;
ListItem.muiName = "ListItem";
var ListItem_default = ListItem;

export {
  NestedListContext_default,
  WrapListContext_default,
  ListSubheaderContext_default,
  GroupListContext_default,
  StyledListItem,
  ListItem_default
};
//# sourceMappingURL=chunk-KVKYW26Z.js.map
