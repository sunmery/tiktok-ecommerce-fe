import {
  getModalDialogUtilityClass
} from "./chunk-45JEQC7U.js";
import {
  ModalDialogSizeContext_default
} from "./chunk-62GDAFA7.js";
import {
  ModalDialogVariantColorContext_default
} from "./chunk-XCNC7U3N.js";
import {
  StyledCardRoot
} from "./chunk-UMHGY5L5.js";
import {
  useSlot
} from "./chunk-UUDWQEY5.js";
import {
  styled_default,
  useThemeProps
} from "./chunk-WQV5RMJW.js";
import {
  _objectWithoutPropertiesLoose,
  capitalize,
  composeClasses,
  isMuiElement,
  useId
} from "./chunk-L5KVHTVE.js";
import {
  _extends,
  require_prop_types
} from "./chunk-NVALJEP4.js";
import {
  clsx_default
} from "./chunk-O6BLJYII.js";
import {
  require_jsx_runtime
} from "./chunk-7UHHP72J.js";
import {
  require_react
} from "./chunk-M55WUIAG.js";
import {
  __toESM
} from "./chunk-ZSMWDLMK.js";

// node_modules/.pnpm/@mui+joy@5.0.0-beta.48_@emotion+react@11.13.5_@types+react@18.3.12_react@18.3.1__@emotion+sty_6qiocraa5nouim2jyzzi5dcqfi/node_modules/@mui/joy/ModalDialog/ModalDialog.js
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["className", "children", "invertedColors", "orientation", "color", "component", "variant", "size", "layout", "maxWidth", "minWidth", "slots", "slotProps"];
var useUtilityClasses = (ownerState) => {
  const {
    variant,
    color,
    size,
    layout
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`, layout && `layout${capitalize(layout)}`]
  };
  return composeClasses(slots, getModalDialogUtilityClass, {});
};
function getBreakpointValue(theme, breakpoint) {
  var _theme$breakpoints, _theme$breakpoints2;
  return breakpoint && (_theme$breakpoints = theme.breakpoints) != null && _theme$breakpoints.values[breakpoint] ? `${(_theme$breakpoints2 = theme.breakpoints) == null ? void 0 : _theme$breakpoints2.values[breakpoint]}px` : breakpoint;
}
var ModalDialogRoot = styled_default(StyledCardRoot, {
  name: "JoyModalDialog",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => _extends({
  "--ModalDialog-minWidth": typeof ownerState.minWidth === "number" ? `${ownerState.minWidth}px` : getBreakpointValue(theme, ownerState.minWidth),
  "--ModalDialog-maxWidth": typeof ownerState.maxWidth === "number" ? `${ownerState.maxWidth}px` : getBreakpointValue(theme, ownerState.maxWidth),
  "--ModalClose-radius": "max((var(--Card-radius) - var(--variant-borderWidth, 0px)) - var(--ModalClose-inset), min(var(--ModalClose-inset) / 2, (var(--Card-radius) - var(--variant-borderWidth, 0px)) / 2))"
}, ownerState.variant === "solid" && {
  "--DialogContent-color": "currentColor"
}, ownerState.size === "sm" && {
  "--Card-padding": "1rem",
  "--ModalDialog-titleOffset": theme.spacing(0.25),
  "--ModalDialog-descriptionOffset": theme.spacing(0.25),
  "--ModalClose-inset": "0.375rem"
}, ownerState.size === "md" && {
  "--Card-padding": "1.25rem",
  "--ModalDialog-titleOffset": theme.spacing(0.25),
  "--ModalDialog-descriptionOffset": theme.spacing(0.75),
  "--ModalClose-inset": "0.5rem"
}, ownerState.size === "lg" && {
  "--Card-padding": "1.5rem",
  "--ModalDialog-titleOffset": theme.spacing(0.5),
  "--ModalDialog-descriptionOffset": theme.spacing(1),
  "--ModalClose-inset": "0.625rem"
}, {
  boxSizing: "border-box",
  boxShadow: theme.shadow.md,
  minWidth: "min(calc(100vw - 2 * var(--Card-padding)), var(--ModalDialog-minWidth, 300px))",
  outline: 0,
  position: "absolute"
}, ownerState.layout === "fullscreen" && {
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  border: 0,
  borderRadius: 0
}, ownerState.layout === "center" && {
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  maxWidth: "min(calc(100vw - 2 * var(--Card-padding)), var(--ModalDialog-maxWidth, 100vw))",
  maxHeight: "calc(100% - 2 * var(--Card-padding))"
}, {
  [`& [id="${ownerState["aria-labelledby"]}"]`]: {
    "--Typography-margin": "calc(-1 * var(--ModalDialog-titleOffset)) 0 var(--ModalDialog-gap) 0",
    "--Typography-fontSize": "1.125em",
    [`& + [id="${ownerState["aria-describedby"]}"]`]: {
      "--unstable_ModalDialog-descriptionOffset": "calc(-1 * var(--ModalDialog-descriptionOffset))"
    }
  },
  [`& [id="${ownerState["aria-describedby"]}"]`]: {
    "--Typography-fontSize": "1em",
    "--Typography-margin": "var(--unstable_ModalDialog-descriptionOffset, var(--ModalDialog-gap)) 0 0 0",
    "&:not(:last-child)": {
      // create spacing between description and the next element.
      "--Typography-margin": "var(--unstable_ModalDialog-descriptionOffset, var(--ModalDialog-gap)) 0 var(--ModalDialog-gap) 0"
    }
  }
}));
var ModalDialog = React.forwardRef(function ModalDialog2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyModalDialog"
  });
  const {
    className,
    children,
    invertedColors = false,
    orientation = "vertical",
    color = "neutral",
    component = "div",
    variant = "outlined",
    size = "md",
    layout = "center",
    maxWidth,
    minWidth,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const ownerState = _extends({}, props, {
    color,
    component,
    maxWidth,
    minWidth,
    layout,
    size,
    variant,
    invertedColors
  });
  const classes = useUtilityClasses(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const labelledBy = useId();
  const describedBy = useId();
  const contextValue = React.useMemo(() => ({
    variant,
    color,
    labelledBy,
    describedBy
  }), [color, variant, labelledBy, describedBy]);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: ModalDialogRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      as: component,
      role: "dialog",
      "aria-modal": "true",
      "aria-labelledby": labelledBy,
      "aria-describedby": describedBy
    }
  });
  return (0, import_jsx_runtime.jsx)(ModalDialogSizeContext_default.Provider, {
    value: size,
    children: (0, import_jsx_runtime.jsx)(ModalDialogVariantColorContext_default.Provider, {
      value: contextValue,
      children: (0, import_jsx_runtime.jsx)(SlotRoot, _extends({}, rootProps, {
        children: React.Children.map(children, (child, index) => {
          if (!React.isValidElement(child)) {
            return child;
          }
          const extraProps = {};
          if (isMuiElement(child, ["Divider"])) {
            extraProps.inset = "inset" in child.props ? child.props.inset : "context";
            const dividerOrientation = orientation === "vertical" ? "horizontal" : "vertical";
            extraProps.orientation = "orientation" in child.props ? child.props.orientation : dividerOrientation;
          }
          if (index === 0) {
            extraProps["data-first-child"] = "";
          }
          if (index === React.Children.count(children) - 1) {
            extraProps["data-last-child"] = "";
          }
          return React.cloneElement(child, extraProps);
        })
      }))
    })
  });
});
true ? ModalDialog.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types.default.node,
  /**
   * @ignore
   */
  className: import_prop_types.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * If `true`, the children with an implicit color prop invert their colors to match the component's variant and color.
   * @default false
   */
  invertedColors: import_prop_types.default.bool,
  /**
   * The layout of the dialog
   * @default 'center'
   */
  layout: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["center", "fullscreen"]), import_prop_types.default.string]),
  /**
   * The maximum width of the component.
   * @example 'md' will use the theme's `md` breakpoint value
   * @example 360 is the number of pixels
   * @example '60ch' can be any valid CSS max-width unit
   */
  maxWidth: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
  /**
   * The minimum width of the component.
   * @example 'md' will use the theme's `md` breakpoint value
   * @example 360 is the number of pixels
   * @example '60ch' can be any valid CSS min-width unit
   */
  minWidth: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
  /**
   * The component orientation.
   * @default 'vertical'
   */
  orientation: import_prop_types.default.oneOf(["horizontal", "vertical"]),
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["sm", "md", "lg"]), import_prop_types.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types.default.shape({
    root: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types.default.shape({
    root: import_prop_types.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types.default.string])
} : void 0;
var ModalDialog_default = ModalDialog;

export {
  ModalDialog_default
};
//# sourceMappingURL=chunk-QD647YD3.js.map
