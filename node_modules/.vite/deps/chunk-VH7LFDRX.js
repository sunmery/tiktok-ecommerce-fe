import {
  getDialogTitleUtilityClass
} from "./chunk-EOQ4DJAR.js";
import {
  ModalDialogSizeContext_default
} from "./chunk-62GDAFA7.js";
import {
  ModalDialogVariantColorContext_default
} from "./chunk-XCNC7U3N.js";
import {
  cardOverflowClasses_default
} from "./chunk-XKY76DIH.js";
import {
  useSlot
} from "./chunk-UUDWQEY5.js";
import {
  styled_default,
  useThemeProps
} from "./chunk-WQV5RMJW.js";
import {
  _objectWithoutPropertiesLoose,
  capitalize,
  composeClasses
} from "./chunk-L5KVHTVE.js";
import {
  _extends,
  require_prop_types
} from "./chunk-NVALJEP4.js";
import {
  require_jsx_runtime
} from "./chunk-7UHHP72J.js";
import {
  require_react
} from "./chunk-M55WUIAG.js";
import {
  __toESM
} from "./chunk-ZSMWDLMK.js";

// node_modules/.pnpm/@mui+joy@5.0.0-beta.48_@emotion+react@11.13.5_@types+react@18.3.12_react@18.3.1__@emotion+sty_6qiocraa5nouim2jyzzi5dcqfi/node_modules/@mui/joy/DialogTitle/DialogTitle.js
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["component", "children", "variant", "color", "level", "slots", "slotProps"];
var useUtilityClasses = (ownerState) => {
  const {
    level,
    color,
    variant
  } = ownerState;
  const slots = {
    root: ["root", level, color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`]
  };
  return composeClasses(slots, getDialogTitleUtilityClass, {});
};
var DialogTitleRoot = styled_default("h2", {
  name: "JoyDialogTitle",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$typography, _theme$variants$owner;
  const lineHeight = ownerState.level !== "inherit" ? (_theme$typography = theme.typography[ownerState.level]) == null ? void 0 : _theme$typography.lineHeight : "1";
  return _extends({
    "--Icon-fontSize": `calc(1em * ${lineHeight})`
  }, ownerState.color && {
    "--Icon-color": "currentColor"
  }, {
    display: "flex",
    gap: "clamp(4px, 0.375em, 0.75rem)",
    margin: "var(--unstable_DialogTitle-margin, 0px)"
  }, ownerState.level && ownerState.level !== "inherit" && theme.typography[ownerState.level], {
    color: "inherit"
  }, ownerState.variant && _extends({
    borderRadius: theme.vars.radius.xs,
    paddingBlock: "min(0.1em, 4px)",
    paddingInline: "0.25em"
  }, (_theme$variants$owner = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants$owner[ownerState.color]), {
    [`.${cardOverflowClasses_default.root} > &`]: {
      "--unstable_DialogTitle-margin": "var(--Card-padding) 0"
    }
  });
});
var sizeToLevel = {
  sm: "title-md",
  md: "title-lg",
  lg: "h4"
};
var DialogTitle = React.forwardRef(function DialogTitle2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyDialogTitle"
  });
  const size = React.useContext(ModalDialogSizeContext_default);
  const context = React.useContext(ModalDialogVariantColorContext_default);
  const {
    component = "h2",
    children,
    variant,
    color: colorProp,
    level = sizeToLevel[size || "md"],
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const color = inProps.color || (variant ? colorProp != null ? colorProp : "neutral" : colorProp);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const ownerState = _extends({}, props, {
    component,
    color,
    variant,
    level
  });
  const classes = useUtilityClasses(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: DialogTitleRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      id: context == null ? void 0 : context.labelledBy
    }
  });
  return (0, import_jsx_runtime.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? DialogTitle.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the DialogTitle if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: import_prop_types.default.oneOf(["danger", "neutral", "primary", "success", "warning"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * Applies the theme typography styles.
   * @default { sm: 'title-md', md: 'title-lg', lg: 'h4' }
   */
  level: import_prop_types.default.oneOf(["body-lg", "body-md", "body-sm", "body-xs", "h1", "h2", "h3", "h4", "inherit", "title-lg", "title-md", "title-sm"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types.default.shape({
    root: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types.default.shape({
    root: import_prop_types.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   */
  variant: import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var DialogTitle_default = DialogTitle;

export {
  DialogTitle_default
};
//# sourceMappingURL=chunk-VH7LFDRX.js.map
