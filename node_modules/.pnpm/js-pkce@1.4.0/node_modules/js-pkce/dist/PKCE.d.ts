import IConfig from './IConfig';
import IObject from './IObject';
import ITokenResponse from './ITokenResponse';
import ICorsOptions from './ICorsOptions';
export default class PKCE {
    private config;
    private state;
    private codeVerifier;
    private corsRequestOptions;
    /**
     * Initialize the instance with configuration
     * @param {IConfig} config
     */
    constructor(config: IConfig);
    /**
     * Allow the user to enable cross domain cors requests
     * @param  enable turn the cross domain request options on.
     * @return ICorsOptions
     */
    enableCorsCredentials(enable: boolean): ICorsOptions;
    /**
     * Generate the authorize url
     * @param  {object} additionalParams include additional parameters in the query
     * @return Promise<string>
     */
    authorizeUrl(additionalParams?: IObject): string;
    /**
     * Given the return url, get a token from the oauth server
     * @param  url current urlwith params from server
     * @param  {object} additionalParams include additional parameters in the request body
     * @return {Promise<ITokenResponse>}
     */
    exchangeForAccessToken(url: string, additionalParams?: IObject): Promise<ITokenResponse>;
    /**
     * Given a refresh token, return a new token from the oauth server
     * @param  refreshTokens current refresh token from server
     * @return {Promise<ITokenResponse>}
     */
    refreshAccessToken(refreshToken: string): Promise<ITokenResponse>;
    /**
     * Get the current codeVerifier or generate a new one
     * @return {string}
     */
    private getCodeVerifier;
    /**
     * Get the current state or generate a new one
     * @return {string}
     */
    private getState;
    /**
     * Get the query params as json from a auth response url
     * @param  {string} url a url expected to have AuthResponse params
     * @return {Promise<IAuthResponse>}
     */
    private parseAuthResponseUrl;
    /**
     * Generate a code challenge
     * @return {Promise<string>}
     */
    private pkceChallengeFromVerifier;
    /**
     * Get a random string from storage or store a new one and return it's value
     * @param  {string} key
     * @return {string}
     */
    private randomStringFromStorage;
    /**
     * Validates params from auth response
     * @param  {AuthResponse} queryParams
     * @return {Promise<IAuthResponse>}
     */
    private validateAuthResponse;
    /**
     * Get the storage (sessionStorage / localStorage) to use, defaults to sessionStorage
     * @return {Storage}
     */
    private getStore;
}
