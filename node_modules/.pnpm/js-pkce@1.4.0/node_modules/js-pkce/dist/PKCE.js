"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var sha256_1 = __importDefault(require("crypto-js/sha256"));
var enc_base64_1 = __importDefault(require("crypto-js/enc-base64"));
var lib_typedarrays_1 = __importDefault(require("crypto-js/lib-typedarrays"));
var PKCE = /** @class */ (function () {
    /**
     * Initialize the instance with configuration
     * @param {IConfig} config
     */
    function PKCE(config) {
        this.state = '';
        this.codeVerifier = '';
        this.corsRequestOptions = {};
        this.config = config;
    }
    /**
     * Allow the user to enable cross domain cors requests
     * @param  enable turn the cross domain request options on.
     * @return ICorsOptions
     */
    PKCE.prototype.enableCorsCredentials = function (enable) {
        this.corsRequestOptions = enable
            ? {
                credentials: 'include',
                mode: 'cors',
            }
            : {};
        return this.corsRequestOptions;
    };
    /**
     * Generate the authorize url
     * @param  {object} additionalParams include additional parameters in the query
     * @return Promise<string>
     */
    PKCE.prototype.authorizeUrl = function (additionalParams) {
        if (additionalParams === void 0) { additionalParams = {}; }
        var codeChallenge = this.pkceChallengeFromVerifier();
        var queryString = new URLSearchParams(Object.assign({
            response_type: 'code',
            client_id: this.config.client_id,
            state: this.getState(additionalParams.state || null),
            scope: this.config.requested_scopes,
            redirect_uri: this.config.redirect_uri,
            code_challenge: codeChallenge,
            code_challenge_method: 'S256',
        }, additionalParams)).toString();
        return "".concat(this.config.authorization_endpoint, "?").concat(queryString);
    };
    /**
     * Given the return url, get a token from the oauth server
     * @param  url current urlwith params from server
     * @param  {object} additionalParams include additional parameters in the request body
     * @return {Promise<ITokenResponse>}
     */
    PKCE.prototype.exchangeForAccessToken = function (url, additionalParams) {
        var _this = this;
        if (additionalParams === void 0) { additionalParams = {}; }
        return this.parseAuthResponseUrl(url).then(function (q) {
            return fetch(_this.config.token_endpoint, __assign({ method: 'POST', body: new URLSearchParams(Object.assign({
                    grant_type: 'authorization_code',
                    code: q.code,
                    client_id: _this.config.client_id,
                    redirect_uri: _this.config.redirect_uri,
                    code_verifier: _this.getCodeVerifier(),
                }, additionalParams)), headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',
                } }, _this.corsRequestOptions)).then(function (response) { return response.json(); });
        });
    };
    /**
     * Given a refresh token, return a new token from the oauth server
     * @param  refreshTokens current refresh token from server
     * @return {Promise<ITokenResponse>}
     */
    PKCE.prototype.refreshAccessToken = function (refreshToken) {
        return fetch(this.config.token_endpoint, {
            method: 'POST',
            body: new URLSearchParams({
                grant_type: 'refresh_token',
                client_id: this.config.client_id,
                refresh_token: refreshToken,
            }),
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',
            },
        }).then(function (response) { return response.json(); });
    };
    /**
     * Get the current codeVerifier or generate a new one
     * @return {string}
     */
    PKCE.prototype.getCodeVerifier = function () {
        if (this.codeVerifier === '') {
            this.codeVerifier = this.randomStringFromStorage('pkce_code_verifier');
        }
        return this.codeVerifier;
    };
    /**
     * Get the current state or generate a new one
     * @return {string}
     */
    PKCE.prototype.getState = function (explicit) {
        if (explicit === void 0) { explicit = null; }
        var stateKey = 'pkce_state';
        if (explicit !== null) {
            this.getStore().setItem(stateKey, explicit);
        }
        if (this.state === '') {
            this.state = this.randomStringFromStorage(stateKey);
        }
        return this.state;
    };
    /**
     * Get the query params as json from a auth response url
     * @param  {string} url a url expected to have AuthResponse params
     * @return {Promise<IAuthResponse>}
     */
    PKCE.prototype.parseAuthResponseUrl = function (url) {
        var params = new URL(url).searchParams;
        return this.validateAuthResponse({
            error: params.get('error'),
            query: params.get('query'),
            state: params.get('state'),
            code: params.get('code'),
        });
    };
    /**
     * Generate a code challenge
     * @return {Promise<string>}
     */
    PKCE.prototype.pkceChallengeFromVerifier = function () {
        var hashed = (0, sha256_1.default)(this.getCodeVerifier());
        return enc_base64_1.default.stringify(hashed).replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
    };
    /**
     * Get a random string from storage or store a new one and return it's value
     * @param  {string} key
     * @return {string}
     */
    PKCE.prototype.randomStringFromStorage = function (key) {
        var fromStorage = this.getStore().getItem(key);
        if (fromStorage === null) {
            this.getStore().setItem(key, lib_typedarrays_1.default.random(64));
        }
        return this.getStore().getItem(key) || '';
    };
    /**
     * Validates params from auth response
     * @param  {AuthResponse} queryParams
     * @return {Promise<IAuthResponse>}
     */
    PKCE.prototype.validateAuthResponse = function (queryParams) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (queryParams.error) {
                return reject({ error: queryParams.error });
            }
            if (queryParams.state !== _this.getState()) {
                return reject({ error: 'Invalid State' });
            }
            return resolve(queryParams);
        });
    };
    /**
     * Get the storage (sessionStorage / localStorage) to use, defaults to sessionStorage
     * @return {Storage}
     */
    PKCE.prototype.getStore = function () {
        var _a;
        return ((_a = this.config) === null || _a === void 0 ? void 0 : _a.storage) || sessionStorage;
    };
    return PKCE;
}());
exports.default = PKCE;
