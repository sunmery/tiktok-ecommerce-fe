"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const utils = require("@typescript-eslint/utils");
const getDocsUrl = require("../../utils/get-docs-url.cjs");
const detectReactQueryImports = require("../../utils/detect-react-query-imports.cjs");
const infiniteQueryPropertyOrder_utils = require("./infinite-query-property-order.utils.cjs");
const constants = require("./constants.cjs");
const createRule = utils.ESLintUtils.RuleCreator(getDocsUrl.getDocsUrl);
const infiniteQueryFunctionsSet = new Set(constants.infiniteQueryFunctions);
function isInfiniteQueryFunction(node) {
  return infiniteQueryFunctionsSet.has(node);
}
const name = "infinite-query-property-order";
const rule = createRule({
  name,
  meta: {
    type: "problem",
    docs: {
      description: "Ensure correct order of inference sensitive properties for infinite queries",
      recommended: "error"
    },
    messages: {
      invalidOrder: "Invalid order of properties for `{{function}}`."
    },
    schema: [],
    hasSuggestions: true,
    fixable: "code"
  },
  defaultOptions: [],
  create: detectReactQueryImports.detectTanstackQueryImports((context) => {
    return {
      CallExpression(node) {
        if (node.callee.type !== utils.AST_NODE_TYPES.Identifier) {
          return;
        }
        const infiniteQueryFunction = node.callee.name;
        if (!isInfiniteQueryFunction(infiniteQueryFunction)) {
          return;
        }
        const argument = node.arguments[0];
        if (argument === void 0 || argument.type !== "ObjectExpression") {
          return;
        }
        const allProperties = argument.properties;
        if (allProperties.length < 2) {
          return;
        }
        const properties = allProperties.flatMap((p) => {
          if (p.type === utils.AST_NODE_TYPES.Property && p.key.type === utils.AST_NODE_TYPES.Identifier) {
            return { name: p.key.name, property: p };
          } else if (p.type === utils.AST_NODE_TYPES.SpreadElement) {
            if (p.argument.type === utils.AST_NODE_TYPES.Identifier) {
              return { name: p.argument.name, property: p };
            } else if (p.argument.type === utils.AST_NODE_TYPES.CallExpression) {
              if (p.argument.callee.type === utils.AST_NODE_TYPES.Identifier) {
                return { name: p.argument.callee.name, property: p };
              }
            }
            throw new Error("Unsupported spread element");
          }
          return [];
        });
        const sortedProperties = infiniteQueryPropertyOrder_utils.sortDataByOrder(properties, constants.sortRules, "name");
        if (sortedProperties === null) {
          return;
        }
        context.report({
          node: argument,
          data: { function: node.callee.name },
          messageId: "invalidOrder",
          fix(fixer) {
            const sourceCode = context.sourceCode;
            const text = sortedProperties.reduce(
              (sourceText, specifier, index) => {
                let text2 = "";
                if (index < allProperties.length - 1) {
                  text2 = sourceCode.getText().slice(
                    allProperties[index].range[1],
                    allProperties[index + 1].range[0]
                  );
                }
                return sourceText + sourceCode.getText(specifier.property) + text2;
              },
              ""
            );
            return fixer.replaceTextRange(
              [allProperties[0].range[0], allProperties.at(-1).range[1]],
              text
            );
          }
        });
      }
    };
  })
});
exports.name = name;
exports.rule = rule;
//# sourceMappingURL=infinite-query-property-order.rule.cjs.map
