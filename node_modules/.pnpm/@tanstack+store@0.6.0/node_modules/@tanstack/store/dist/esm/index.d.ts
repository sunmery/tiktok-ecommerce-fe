/**
 * @private
 */
export type AnyUpdater = (...args: Array<any>) => any;
/**
 * @private
 */
export type Listener = () => void;
export interface StoreOptions<TState, TUpdater extends AnyUpdater = (cb: TState) => TState> {
    /**
     * Replace the default update function with a custom one.
     */
    updateFn?: (previous: TState) => (updater: TUpdater) => TState;
    /**
     * Called when a listener subscribes to the store.
     *
     * @return a function to unsubscribe the listener
     */
    onSubscribe?: (listener: Listener, store: Store<TState, TUpdater>) => () => void;
    /**
     * Called after the state has been updated, used to derive other state.
     */
    onUpdate?: () => void;
}
export declare class Store<TState, TUpdater extends AnyUpdater = (cb: TState) => TState> {
    listeners: Set<Listener>;
    state: TState;
    options?: StoreOptions<TState, TUpdater>;
    /**
     * @private
     */
    _batching: boolean;
    /**
     * @private
     */
    _flushing: number;
    constructor(initialState: TState, options?: StoreOptions<TState, TUpdater>);
    subscribe: (listener: Listener) => () => void;
    setState: (updater: TUpdater) => void;
    /**
     * @private
     */
    _flush: () => void;
    batch: (cb: () => void) => void;
}
